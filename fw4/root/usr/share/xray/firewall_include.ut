#!/usr/bin/utpl
{%
    "use strict";
    import { cursor } from "uci";
    import { stat } from "fs";
    const config = function () {
        const uci = cursor();
        uci.load("xray_fw4");
        return uci.get_all("xray_fw4");
    }();
    const general = config[filter(keys(config), k => config[k][".type"] == "general")[0]];
    const tp_spec_src_fw = uniq(map(filter(keys(config), k => config[k][".type"] == "lan_hosts" && config[k].bypassed == "0"), k => config[k].macaddr) || []);
    const tp_spec_src_bp = uniq(map(filter(keys(config), k => config[k][".type"] == "lan_hosts" && config[k].bypassed == "1"), k => config[k].macaddr) || []);
    const uids_direct = uniq(general.uids_direct || []);
    const gids_direct = uniq(general.gids_direct || []);
    let wan_bp_ips_no_dns = general.wan_bp_ips || [];
    let wan_fw_ips_no_dns = general.wan_fw_ips || [];
    push(wan_bp_ips_no_dns, split(general.fast_dns, ":")[0]);
    push(wan_fw_ips_no_dns, split(general.secure_dns, ":")[0]);
    const wan_bp_ips = uniq(wan_bp_ips_no_dns);
    const wan_fw_ips = uniq(wan_fw_ips_no_dns);
    const ignore_tp_spec_def_gw = stat("/usr/share/xray/ignore_tp_spec_def_gw");
    const transparent_default_port_policy = general.transparent_default_port_policy || "forwarded";
    const wan_fw_tcp_ports = general.wan_fw_tcp_ports || [];
    const wan_fw_udp_ports = general.wan_fw_udp_ports || [];
    const wan_bp_tcp_ports = general.wan_bp_tcp_ports || [];
    const wan_bp_udp_ports = general.wan_bp_udp_ports || [];
    const counter_template = "counter packets 0 bytes 0";
    let counter = "";
    if (general.fw4_counter == "1") {
        counter = counter_template;
    };
%}
    set tp_spec_src_ac {
        type ether_addr
        size 65536
    }

    set tp_spec_src_bp {
        type ether_addr
        size 65536
{% if (length(tp_spec_src_bp) > 0): %}
        elements = { {{ join(", ", tp_spec_src_bp) }} }
{% endif %}
    }

    set tp_spec_src_fw {
        type ether_addr
        size 65536
{% if (length(tp_spec_src_fw) > 0): %}
        elements = { {{ join(", ", tp_spec_src_fw) }} }
{% endif %}
    }

    set tp_spec_dst_sp {
        type ipv4_addr
        size 65536
        flags interval
        elements = { 0.0.0.0/8, 10.0.0.0/8,
                 100.64.0.0/10, 127.0.0.0/8,
                 169.254.0.0/16, 172.16.0.0/12,
                 192.0.0.0/24, 192.31.196.0/24,
                 192.52.193.0/24, 192.88.99.0/24,
                 192.168.0.0/16, 192.175.48.0/24,
                 224.0.0.0-255.255.255.255 }
    }

    set tp_spec_dst_bp {
        type ipv4_addr
        size 65536
        flags interval
        elements = { {{ join(", ", wan_bp_ips)}} }
    }

    set tp_spec_dst_fw {
        type ipv4_addr
        size 65536
        flags interval
        elements = { {{ join(", ", wan_fw_ips)}} }
    }

{% if (ignore_tp_spec_def_gw == null): %}
    set tp_spec_def_gw {
        type ipv4_addr
        size 65536
        flags interval
    }
{% endif %}

    chain xray_prerouting {
        type filter hook prerouting priority filter; policy accept;
        meta mark 0x000000fc {{ counter }} goto tp_spec_wan_ac
        iifname "{{ general.lan_ifaces }}" {{ counter }} goto tp_spec_lan_dg
    }

    chain xray_output {
        type route hook output priority filter; policy accept;
        {{ counter }} goto tp_spec_wan_dg
    }

    chain tp_spec_lan_ac {
        ether saddr @tp_spec_src_bp {{ counter }} return
        ether saddr @tp_spec_src_fw {{ counter }} goto tp_spec_wan_fw
        ether saddr @tp_spec_src_ac {{ counter }} goto tp_spec_wan_ac
        {{ counter }} goto tp_spec_wan_ac
    }

    chain tp_spec_lan_dg {
        ip daddr @tp_spec_dst_fw {{ counter }} goto tp_spec_lan_re
        ip daddr @tp_spec_dst_sp {{ counter }} return
        ip daddr @tp_spec_dst_bp {{ counter }} return
{% if (ignore_tp_spec_def_gw == null): %}
        ip daddr @tp_spec_def_gw {{ counter }} return
{% endif %}
        {{ counter }} goto tp_spec_lan_re
    }

    chain tp_spec_lan_re {
{% if (transparent_default_port_policy == "bypassed"): %}
    {% if (length(wan_fw_tcp_ports) > 0): %}
        tcp dport { {{ join(", ", wan_fw_tcp_ports) }} } {{ counter }} goto tp_spec_lan_ac
    {% endif %}
    {% if (length(wan_fw_udp_ports) > 0): %}
        udp dport { {{ join(", ", wan_fw_udp_ports) }} } {{ counter }} goto tp_spec_lan_ac
    {% endif %}
{% else %}
    {% if (length(wan_bp_tcp_ports) > 0): %}
        tcp dport { {{ join(", ", wan_bp_tcp_ports) }} } {{ counter }} return
    {% endif %}
    {% if (length(wan_bp_udp_ports) > 0): %}
        udp dport { {{ join(", ", wan_bp_udp_ports) }} } {{ counter }} return
    {% endif %}
        meta l4proto { tcp, udp } {{ counter }} goto tp_spec_lan_ac
{% endif %}
    }

    chain tp_spec_wan_ac {
        ip daddr @tp_spec_dst_fw {{ counter }} goto tp_spec_wan_fw
        ip daddr @tp_spec_dst_bp {{ counter }} return
        {{ counter }} goto tp_spec_wan_fw
    }

    chain tp_spec_wan_dg {
{% if (length(uids_direct) > 0): %}
        meta skuid { {{ join(", ", uids_direct) }} } {{ counter }} return
{% endif %}
{% if (length(gids_direct) > 0): %}
        meta skgid { {{ join(", ", gids_direct) }} } {{ counter }} return
{% endif %}
        meta mark {{ sprintf("0x%08x", general.mark) }} {{ counter }} return
        ip daddr @tp_spec_dst_fw {{ counter }} goto tp_spec_wan_re
        ip daddr @tp_spec_dst_sp {{ counter }} return
        ip daddr @tp_spec_dst_bp {{ counter }} return
{% if (ignore_tp_spec_def_gw == null): %}
        ip daddr @tp_spec_def_gw {{ counter }} return
{% endif %}
        {{ counter }} goto tp_spec_wan_re
    }

    chain tp_spec_wan_re {
{% if (transparent_default_port_policy == "bypassed"): %}
    {% if (length(wan_fw_tcp_ports) > 0): %}
        tcp dport { {{ join(", ", wan_fw_tcp_ports) }} } {{ counter }} meta mark set 0x000000fc
    {% endif %}
    {% if (length(wan_fw_udp_ports) > 0): %}
        udp dport { {{ join(", ", wan_fw_udp_ports) }} } {{ counter }} meta mark set 0x000000fc
    {% endif %}
{% else %}
    {% if (length(wan_bp_tcp_ports) > 0): %}
        tcp dport { {{ join(", ", wan_bp_tcp_ports) }} } {{ counter }} return
    {% endif %}
    {% if (length(wan_bp_udp_ports) > 0): %}
        udp dport { {{ join(", ", wan_bp_udp_ports) }} } {{ counter }} return
    {% endif %}
        meta l4proto { tcp, udp } {{ counter }} meta mark set 0x000000fc
{% endif %}
    }

    chain tp_spec_wan_fw {
        meta l4proto tcp {{ counter }} meta mark set 0x000000fb tproxy ip to 0.0.0.0:{{ general.tproxy_port_tcp }} accept
        meta l4proto udp {{ counter }} meta mark set 0x000000fb tproxy ip to 0.0.0.0:{{ general.tproxy_port_udp }} accept
    }
