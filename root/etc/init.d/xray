#!/bin/sh /etc/rc.common

START=90
STOP=15
USE_PROCD=1
NAME=xray

GENERATE_CONF="/usr/share/xray/gen_config.lua"
FIREWALL_INCLUDE="/usr/share/xray/firewall_include.lua"

uci_get_by_name() {
    local ret=$(uci get ${NAME}.$1.$2 2> /dev/null)
    echo ${ret:=$3}
}

uci_get_by_type() {
    local ret=$(uci get ${NAME}.@$1[0].$2 2> /dev/null)
    echo ${ret:=$3}
}

uci_bool_by_name() {
    case "$(uci_get_by_name $1 $2)" in
        1 | on | true | yes | enabled) return 0 ;;
    esac
    return 1
}

get_lan_hosts() {
    uci_bool_by_name $1 bypassed && echo "b,$(uci_get_by_name $1 macaddr)"
}

start_xray() {
    logger -st xray[$$] -p4 "Starting Xray from $1"
    procd_open_instance
    procd_set_param respawn
    procd_set_param command $1
    procd_append_param command run
    procd_append_param command -confdir
    procd_append_param command /var/etc/xray
    procd_set_param limits nofile="8192 16384"
    procd_set_param env XRAY_LOCATION_ASSET=/usr/share/xray
    procd_set_param stdout 1
    procd_set_param stderr 1
    procd_set_param file /etc/config/xray
    procd_close_instance
}

gen_config_file() {
    mkdir -p /var/etc/xray
    rm /var/etc/xray/*
    if [ -s /usr/share/xray/infinite_retry ] ; then
        while [ ! -s /var/etc/xray/config.json ] ; do
            logger -st xray[$$] -p4 "(Re)generating Xray configuration files..."
            /usr/bin/lua ${GENERATE_CONF} > /var/etc/xray/config.json
        done
    else
        logger -st xray[$$] -p4 "Generating Xray configuration files..."
        /usr/bin/lua ${GENERATE_CONF} > /var/etc/xray/config.json
    fi
    local custom_config=$(uci_get_by_type general custom_config)
    [ ! "${#custom_config}" == "0" ] && echo ${custom_config} > /var/etc/xray/config_custom.json
}

setup_firewall() {
    /usr/bin/transparent-proxy-ipset \
        -B "$(uci_get_by_type general wan_bp_list)" \
        -b "$(uci_get_by_type general wan_bp_ips) $(uci_get_by_type general fast_dns)" \
        -W "$(uci_get_by_type general wan_fw_list)" \
        -w "$(uci_get_by_type general wan_fw_ips) $(uci_get_by_type general secure_dns)" \
        -a "$(config_foreach get_lan_hosts lan_hosts)"
    /usr/bin/lua ${FIREWALL_INCLUDE} enable > $(uci get firewall.xray.path)
    ip rule add fwmark 251 lookup 251
    ip rule add fwmark 252 lookup 252
    ip route add local default dev lo table 251
    ip route add local default dev lo table 252
    /etc/init.d/firewall restart > /dev/null 2>&1
}

flush_firewall() {
    /usr/bin/lua ${FIREWALL_INCLUDE} flush > $(uci get firewall.xray.path)
    /etc/init.d/firewall restart > /dev/null 2>&1
    ip rule del fwmark 251 lookup 251
    ip rule del fwmark 252 lookup 252
    ip route del local default dev lo table 251
    ip route del local default dev lo table 252
    /usr/bin/transparent-proxy-ipset -f
}

setup_dnsmasq() {
    local dns_port=$(uci_get_by_type general dns_port)
    local dns_count=$(uci_get_by_type general dns_count 0)

    echo "# Generated dnsmasq configurations by luci-app-xray" > /tmp/dnsmasq.d/xray.conf
    echo "strict-order" >> /tmp/dnsmasq.d/xray.conf
    echo "server=/#/127.0.0.1#${dns_port}" >> /tmp/dnsmasq.d/xray.conf
    local cur_port
    for cur_port in $(seq ${dns_port} $(expr ${dns_port} + ${dns_count})); do
        echo "server=127.0.0.1#${cur_port}" >> /tmp/dnsmasq.d/xray.conf
    done

    logger -st xray[$$] -p4 $(cat /tmp/dnsmasq.d/xray.conf)
    /etc/init.d/dnsmasq restart > /dev/null 2>&1
}

flush_dnsmasq() {
    rm /tmp/dnsmasq.d/xray.conf
    /etc/init.d/dnsmasq restart > /dev/null 2>&1
}

create_when_enable() {
    [ "$(uci_get_by_type general transparent_proxy_enable)" == "1" ] || return 0
    logger -st xray[$$] -p4 "Setting dnsmasq and firewall for transparent proxy..."
    setup_dnsmasq
    setup_firewall
}

flush_when_disable() {
    logger -st xray[$$] -p4 "Resetting dnsmasq and firewall configurations..."
    flush_dnsmasq
    flush_firewall
}

start_service() {
    config_load $NAME
    mkdir -p /var/run /var/etc
    local xray_bin=$(uci_get_by_type general xray_bin)
    command -v ${xray_bin} > /dev/null 2>&1 || return 1
    gen_config_file
    start_xray ${xray_bin}
    create_when_enable || flush_when_disable
}

stop_service() {
    flush_when_disable
}

reload_service() {
    stop
    start
}

service_triggers() {
    procd_add_reload_trigger "xray"
}
